"use strict";

// Imports
const compare = require("../miscellaneous/compare.js");
const integer = require("../miscellaneous/integer.js");
const isNegative = require("../miscellaneous/isNegative.js");
const isNumber = require("../miscellaneous/isNumber.js");
const isZero = require("../miscellaneous/isZero.js");
const multiply = require("./multiply.js");
const negative = require("../miscellaneous/negative.js");
const parse = require("../utils/parse.js");
const positive = require("../miscellaneous/positive.js");
const shift = require("../miscellaneous/shift.js");
const subtract = require("./subtract.js");
const trim = require("../utils/trim.js");

/**
 * Divides and returns the quotient and modulus of two number-like values
 * @param {string|number} a Number-like value
 * @param {string|number} b Number-like value
 * @param {?string|number} l Decimal length
 * @returns {{ quotient: string, modulus: string }}
 */
function gdivide(a, b, l = 16) {
    if(!isNumber(a) || !isNumber(b) || !isNumber(l)) throw new TypeError("Argument is not a number-like value");
    if(isZero(b)) throw new TypeError("Argument cannot be zero");
    let na = isNegative(a), nb = isNegative(b), dl = +integer(l), il = parse(b, true)[2].length;
    if(na && nb) return gdivide(positive(a), positive(b));
    else if(na || nb) {
        let { quotient, modulus } = gdivide(positive(a), positive(b));
        return { quotient: negative(quotient), modulus: negative(modulus) };
    };
    let da = integer(shift(a, +dl + il), false).split(""), pb = integer(shift(b, il), false), d = [], r = [];
    while(da.length) {
        if(da.every(v => v === "0") && !d.length) {
            r = r.concat(da);
            break;
        };
        d.push(da.shift());
        let pa = d.join("");
        if(d.length < pb.length || compare(pa, pb) === -1) {
            r.push("0");
            continue;
        };
        for(let i = 1; i < 10; i++) {
            let p = subtract(pa, multiply(pb, i));
            if(compare(p, pb) === -1) {
                r.push(`${i}`);
                d = integer(p, false).split("");
                break;
            };
        };
    };
    let q = trim(shift(r.join(""), negative(+dl)));
    return { quotient: q, modulus: subtract(a, multiply(b, q)) };
};

// Exports
module.exports = gdivide;