"use strict";

// Imports
const isNegative = require("../miscellaneous/isNegative.js");
const isNumber = require("../miscellaneous/isNumber.js");
const maximum = require("../miscellaneous/maximum.js");
const negative = require("../miscellaneous/negative.js");
const parse = require("../utils/parse.js");
const positive = require("../miscellaneous/positive.js");
const shift = require("../miscellaneous/shift.js");
const trim = require("../utils/trim.js");

/**
 * Adds two number-like values together
 * @param {string|number} a Number-like value
 * @param {string|number} b Number-like value
 * @returns {string}
 */
function plus(a, b) {
    if(!isNumber(a) || !isNumber(b)) throw new TypeError("Argument is not a number-like value");
    let na = isNegative(a), nb = isNegative(b);
    if(na && nb) return negative(plus(positive(a), positive(b)));
    else if(na || nb) {
        let subtract = require("./subtract.js");
        return na ? subtract(b, positive(a)) : subtract(a, positive(b));
    };
    let l = maximum([ parse(a, true)[2].length, parse(b, true)[2].length ]);
    let [ daa, dab ] = [ a, b ].map(v => parse(shift(v, l))[1].split("")), r = "", c = 0;
    while(daa.length || dab.length) {
        let [ da, db ] = [ daa, dab ].map(da => +(da.pop() || "0")), a = `${+da + +db + c}`;
        r = `${a[a.length === 2 ? 1 : 0]}${r}`;
        c = a.length === 2 ? 1 : 0;
    };
    return trim(shift(`${c}${r}`, negative(l)));
};

// Exports
module.exports = plus;